{"version":3,"sources":["../src/index.js"],"names":["pageDown","page","isEnd","evaluate","window","scrollBy","top","innerHeight","behavior","scrollY","document","documentElement","scrollHeight","defaultOptions","fullPage","captureBeyondViewport","type","delay","fullPageScreenshot","options","pagesCount","extraPixels","viewport","scrollTo","left","pageHeight","Math","ceil","devicePixelRatio","height","width","innerWidth","path","pptrScreenshotOptions","images","index","waitForTimeout","image","screenshot","push","Jimp","read","write","cropped","pop","then","crop","getBufferAsync","AUTO","mergedImage","direction","Promise","resolve"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-await-in-loop */\nimport merge from 'merge-img';\nimport Jimp from 'jimp';\n\nconst pageDown = async (page) => {\n   const isEnd = await page.evaluate(() => {\n      window.scrollBy({\n         top: window.innerHeight,\n         behavior: 'instant',\n      });\n      return window.scrollY >= document.documentElement.scrollHeight - window.innerHeight;\n   });\n\n   return isEnd;\n};\n\nconst defaultOptions = {\n   fullPage: false,\n   captureBeyondViewport: false,\n   type: 'png',\n   delay: 0,\n};\n\nconst fullPageScreenshot = async (page, options = {}) => {\n   const { pagesCount, extraPixels, viewport } = await page.evaluate(() => {\n      window.scrollTo({\n         top: 0,\n         left: 0,\n         behavior: 'instant',\n      });\n\n      const pageHeight = document.documentElement.scrollHeight;\n      return {\n         pagesCount: Math.ceil(pageHeight / window.innerHeight),\n         extraPixels: (pageHeight % window.innerHeight) * window.devicePixelRatio,\n         viewport: {\n            height: window.innerHeight * window.devicePixelRatio,\n            width: window.innerWidth * window.devicePixelRatio,\n         },\n      };\n   });\n\n   const { path, delay, ...pptrScreenshotOptions } = { ...defaultOptions, ...options };\n\n   const images = [];\n   for (let index = 0; index < pagesCount; index += 1) {\n      if (delay) {\n         await page.waitForTimeout(delay);\n      }\n      const image = await page.screenshot(pptrScreenshotOptions);\n      await pageDown(page);\n      images.push(image);\n   }\n\n   if (pagesCount === 1) {\n      const image = await Jimp.read(images[0]);\n      if (path) image.write(path);\n      return image;\n   }\n   \n   if (extraPixels > 0) {\n     // crop last image extra pixels\n     const cropped = await Jimp.read(images.pop())\n        .then((image) => image.crop(0, viewport.height - extraPixels, viewport.width, extraPixels))\n        .then((image) => image.getBufferAsync(Jimp.AUTO));\n     \n     images.push(cropped);\n   }\n   const mergedImage = await merge(images, { direction: true });\n\n   if (path) {\n      await new Promise((resolve) => {\n         mergedImage.write(path, () => {\n            resolve();\n         });\n      });\n   }\n\n   return mergedImage;\n};\n\nexport default fullPageScreenshot;\n"],"file":"index.js"}