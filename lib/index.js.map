{"version":3,"sources":["../src/index.js"],"names":["fullPageScreenshot","page","options","pagesCount","extraPixels","viewport","evaluate","pageHeight","document","body","offsetHeight","els","querySelectorAll","i","length","Math","max","clientHeight","window","scrollTo","ceil","innerHeight","devicePixelRatio","height","width","innerWidth","images","index","delay","waitFor","image","screenshot","fullPage","scrollBy","push","Jimp","read","path","write","cropped","pop","then","crop","getBufferAsync","AUTO","mergedImage","direction"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-await-in-loop */\nimport merge from 'merge-img';\nimport Jimp from 'jimp';\n\nconst fullPageScreenshot = async ( page, options = {} ) => {\n    const { pagesCount, extraPixels, viewport } = await page.evaluate( () => {\n\n\t\t// Calculate page height based on the offset height of the body element and \n\t\t// the largest nested element\n\t\tlet pageHeight = document.body.offsetHeight\n\n\t\tconst els = document.querySelectorAll(`body *`)\n\t\tfor (var i = 0; i < els.length; i++) {\n\t\t\tpageHeight = Math.max(els[i].clientHeight, pageHeight);\n\t\t}\n\n        window.scrollTo( 0, 0 );\n        return {\n            pagesCount: Math.ceil( pageHeight / window.innerHeight ),\n            extraPixels: pageHeight % window.innerHeight * window.devicePixelRatio,\n            viewport: { height: window.innerHeight * window.devicePixelRatio, width: window.innerWidth * window.devicePixelRatio },\n\t\t};\n\t\t\n    } );\n\n    const images = [];\n    for ( let index = 0; index < pagesCount; index += 1 ) {\n\n        if ( options.delay ) {\n            await page.waitFor( options.delay );\n\t\t}\n\t\t\n\t\tconst image = await page.screenshot( { fullPage: false } );\n\t\t\n        await page.evaluate( () => {\n\t\t\twindow.scrollBy( 0, window.innerHeight );\t\t\n\t\t} )\n\n        images.push( image );\n    }\n\n    if ( pagesCount === 1 ) {\n        const image = await Jimp.read( images[0] );\n        if ( options.path ) image.write( options.path );\n        return image;\n    }\n    // crop last image extra pixels\n    const cropped = await Jimp.read( images.pop() )\n        .then( image => image.crop( 0, viewport.height - extraPixels, viewport.width, extraPixels ) )\n        .then( image => image.getBufferAsync( Jimp.AUTO ) );\n\n    images.push( cropped );\n    const mergedImage = await merge( images, { direction: true } );\n    if ( options.path ) mergedImage.write( options.path );\n\n    return mergedImage;\n};\n\nexport default fullPageScreenshot;\n"],"file":"index.js"}