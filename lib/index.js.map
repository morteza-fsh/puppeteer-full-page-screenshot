{"version":3,"sources":["../src/index.js"],"names":["pageDown","page","isEnd","evaluate","window","scrollBy","innerHeight","scrollY","document","body","clientHeight","fullPageScreenshot","options","pagesCount","extraPixels","viewport","scrollTo","Math","ceil","devicePixelRatio","height","width","innerWidth","images","index","delay","waitFor","image","screenshot","fullPage","push","Jimp","read","path","write","cropped","pop","then","crop","getBufferAsync","AUTO","mergedImage","direction","Promise","resolve","reject"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable no-await-in-loop */\nimport merge from 'merge-img';\nimport Jimp from 'jimp';\n\nconst pageDown = async ( page ) => {\n    const isEnd = await page.evaluate( () => {\n        window.scrollBy( 0, window.innerHeight );\n        return window.scrollY >= document.body.clientHeight - window.innerHeight;\n    } );\n\n    return isEnd;\n};\n\nconst fullPageScreenshot = async ( page, options = {} ) => {\n    const { pagesCount, extraPixels, viewport } = await page.evaluate( () => {\n        window.scrollTo( 0, 0 );\n        return {\n            pagesCount: Math.ceil( document.body.clientHeight / window.innerHeight ),\n            extraPixels: document.body.clientHeight % window.innerHeight * window.devicePixelRatio,\n            viewport: { height: window.innerHeight * window.devicePixelRatio, width: window.innerWidth * window.devicePixelRatio },\n        };\n    } );\n\n    const images = [];\n    for ( let index = 0; index < pagesCount; index += 1 ) {\n        if ( options.delay ) {\n            await page.waitFor( options.delay );\n        }\n        const image = await page.screenshot( { fullPage: false } );\n        await pageDown( page );\n        images.push( image );\n    }\n\n    if ( pagesCount === 1 ) {\n        const image = await Jimp.read( images[0] );\n        if ( options.path ) image.write( options.path );\n        return image;\n    }\n    // crop last image extra pixels\n    const cropped = await Jimp.read( images.pop() )\n        .then( image => image.crop( 0, viewport.height - extraPixels, viewport.width, extraPixels ) )\n        .then( image => image.getBufferAsync( Jimp.AUTO ) );\n\n    images.push( cropped );\n    const mergedImage = await merge( images, { direction: true } );\n \n    if (options.path) {\n        await new Promise((resolve, reject) => {\n          mergedImage.write(options.path, () => {\n            resolve();\n          });\n        });\n    };\n    \n    return mergedImage;\n};\n\nexport default fullPageScreenshot;\n"],"file":"index.js"}